{"version":3,"sources":["Editor.tsx","ChatMessage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Editor","state","value","RichTextEditor","createValueFromString","props","initialText","onChange","setState","handleClick","onSave","toString","this","readOnly","classes","className","root","Button","variant","component","onClick","button","Component","withStyles","palette","spacing","createStyles","margin","padding","Message","name","text","Typography","getDataForId","id","axios","get","then","response","data","sendMessageForId","post","App","chatId","userId","chatData","connect","a","handleSave","res","handleChange","event","target","TextField","label","textField","connectButton","messages","map","chatMessage","i","ChatMessage","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0eed97cd.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport RichTextEditor from 'react-rte';\n\nimport {\n\twithStyles,\n\tcreateStyles,\n\tWithStyles,\n\tTheme\n} from '@material-ui/core/styles';\n\nimport Button from '@material-ui/core/Button';\n\nconst editorStyles = ({ palette, spacing }: Theme) =>\n\tcreateStyles({\n\t\tbutton: {\n\t\t\tmargin: spacing(1)\n\t\t},\n\t\troot: {\n\t\t\tpadding: spacing(1)\n\t\t}\n\t});\n\ninterface EditorProps extends WithStyles<typeof editorStyles> {\n\tinitialText: string;\n\tonSave: (data: string) => void;\n\n\treadOnly?: boolean;\n\tonChange?: (data: string) => void;\n}\n\nclass Editor extends Component<EditorProps> {\n\tstate = {\n\t\tvalue: RichTextEditor.createValueFromString(\n\t\t\tthis.props.initialText,\n\t\t\t'markdown'\n\t\t)\n\t};\n\n\tonChange = (value: any) => {\n\t\tthis.setState({ value });\n\t};\n\n\thandleClick = () => {\n\t\tthis.props.onSave(this.state.value.toString('markdown'));\n\t};\n\n\trender() {\n\t\tconst { value } = this.state;\n\t\tconst { readOnly, classes } = this.props;\n\t\treturn (\n\t\t\t<div className={classes.root}>\n\t\t\t\t<RichTextEditor\n\t\t\t\t\tvalue={value}\n\t\t\t\t\treadOnly={readOnly}\n\t\t\t\t\tonChange={this.onChange}\n\t\t\t\t/>\n\t\t\t\t<Button\n\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\tcomponent=\"span\"\n\t\t\t\t\tonClick={this.handleClick}\n\t\t\t\t\tclassName={classes.button}\n\t\t\t\t>\n\t\t\t\t\tSend\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default withStyles(editorStyles)(Editor);\n","import React, { Component } from 'react';\nimport RichTextEditor from 'react-rte';\n\nimport { Typography } from '@material-ui/core';\n\ninterface MessageProps {\n\ttext: string;\n\tname: string;\n}\n\nconst Message = (props: MessageProps) => {\n\tconst { name, text } = props;\n\tconst value = RichTextEditor.createValueFromString(text, 'markdown');\n\treturn (\n\t\t<div>\n\t\t\t<Typography>Name: {name}</Typography>\n\t\t\t<RichTextEditor value={value} readOnly />\n\t\t</div>\n\t);\n};\n\nexport default Message;\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\nimport {\n\twithStyles,\n\tcreateStyles,\n\tWithStyles,\n\tTheme\n} from '@material-ui/core/styles';\n\nimport { Button } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\n\nimport logo from './logo.svg';\nimport './App.css';\nimport Editor from './Editor';\nimport ChatMessage from './ChatMessage';\n\nconst getDataForId = (id: string) =>\n\taxios.get(`/api/chat/${id}`).then(response => response.data);\n\nconst sendMessageForId = (id: string, data: any) =>\n\taxios.post(`/api/chat/${id}`, data).then(response => response.data);\n\nconst appStyles = ({ palette, spacing }: Theme) =>\n\tcreateStyles({\n\t\tconnectButton: {\n\t\t\tmargin: spacing(1)\n\t\t},\n\t\troot: {\n\t\t\tpadding: spacing(1)\n\t\t},\n\t\ttextField: {},\n\t\tmessages: {}\n\t});\n\ninterface IProps extends WithStyles<typeof appStyles> {}\ninterface IState {\n\tchatId: string;\n\tuserId: string;\n\tchatData: Array<{ text: string; name: string }>;\n}\n\nclass App extends Component<IProps, IState> {\n\tstate: IState = {\n\t\tchatId: '',\n\t\tuserId: '',\n\t\tchatData: []\n\t};\n\n\trender() {\n\t\tconst { chatId, userId, chatData } = this.state;\n\t\tconst { classes } = this.props;\n\t\treturn (\n\t\t\t<div className={classes.root}>\n\t\t\t\t<TextField\n\t\t\t\t\tid=\"standard-name\"\n\t\t\t\t\tlabel=\"Chat Id\"\n\t\t\t\t\tclassName={classes.textField}\n\t\t\t\t\tvalue={chatId}\n\t\t\t\t\tonChange={this.handleChange('chatId')}\n\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t/>\n\t\t\t\t<TextField\n\t\t\t\t\tid=\"standard-name\"\n\t\t\t\t\tlabel=\"User Name\"\n\t\t\t\t\tclassName={classes.textField}\n\t\t\t\t\tvalue={userId}\n\t\t\t\t\tonChange={this.handleChange('userId')}\n\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t/>\n\t\t\t\t<Button className={classes.connectButton} onClick={this.connect}>\n\t\t\t\t\tConnect\n\t\t\t\t</Button>\n\t\t\t\t<div className={classes.messages}>\n\t\t\t\t\t{chatData.map((chatMessage, i) => (\n\t\t\t\t\t\t<ChatMessage\n\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\ttext={chatMessage.text}\n\t\t\t\t\t\t\tname={chatMessage.name}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<Editor onSave={this.handleSave} initialText=\"\" />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tconnect = async () => {\n\t\tconst data = await getDataForId(this.state.chatId);\n\t\tthis.setState({\n\t\t\tchatData: data\n\t\t});\n\t};\n\n\thandleSave = async (text: string) => {\n\t\tconst { userId, chatId } = this.state;\n\t\tconst data = {\n\t\t\ttext,\n\t\t\tname: userId\n\t\t};\n\t\tconst res = await sendMessageForId(chatId, data);\n\t\tthis.setState({\n\t\t\tchatData: res\n\t\t});\n\t};\n\n\thandleChange = (name: any) => (event: any) => {\n\t\tthis.setState({ [name]: event.target.value } as IState);\n\t};\n}\n\nexport default withStyles(appStyles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}